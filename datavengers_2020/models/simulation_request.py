# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from datavengers_2020.models.base_model_ import Model
from datavengers_2020.models.algorithm_type import AlgorithmType  # noqa: F401,E501
from datavengers_2020.models.indicator import Indicator  # noqa: F401,E501
from datavengers_2020.models.initial_condition import InitialCondition  # noqa: F401,E501
from datavengers_2020 import util


class SimulationRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, symbols: List[str]=None, training_start_date: datetime=None, training_end_date: datetime=None, testing_start_date: datetime=None, testing_end_date: datetime=None, algorithm: List[AlgorithmType]=None, initial_condition: List[InitialCondition]=None, indicators: List[Indicator]=None):  # noqa: E501
        """SimulationRequest - a model defined in Swagger

        :param symbols: The symbols of this SimulationRequest.  # noqa: E501
        :type symbols: List[str]
        :param training_start_date: The training_start_date of this SimulationRequest.  # noqa: E501
        :type training_start_date: datetime
        :param training_end_date: The training_end_date of this SimulationRequest.  # noqa: E501
        :type training_end_date: datetime
        :param testing_start_date: The testing_start_date of this SimulationRequest.  # noqa: E501
        :type testing_start_date: datetime
        :param testing_end_date: The testing_end_date of this SimulationRequest.  # noqa: E501
        :type testing_end_date: datetime
        :param algorithm: The algorithm of this SimulationRequest.  # noqa: E501
        :type algorithm: List[AlgorithmType]
        :param initial_condition: The initial_condition of this SimulationRequest.  # noqa: E501
        :type initial_condition: List[InitialCondition]
        :param indicators: The indicators of this SimulationRequest.  # noqa: E501
        :type indicators: List[Indicator]
        """
        self.swagger_types = {
            'symbols': List[str],
            'training_start_date': datetime,
            'training_end_date': datetime,
            'testing_start_date': datetime,
            'testing_end_date': datetime,
            'algorithm': List[AlgorithmType],
            'initial_condition': List[InitialCondition],
            'indicators': List[Indicator]
        }

        self.attribute_map = {
            'symbols': 'symbols',
            'training_start_date': 'trainingStartDate',
            'training_end_date': 'trainingEndDate',
            'testing_start_date': 'testingStartDate',
            'testing_end_date': 'testingEndDate',
            'algorithm': 'algorithm',
            'initial_condition': 'initialCondition',
            'indicators': 'indicators'
        }
        self._symbols = symbols
        self._training_start_date = training_start_date
        self._training_end_date = training_end_date
        self._testing_start_date = testing_start_date
        self._testing_end_date = testing_end_date
        self._algorithm = algorithm
        self._initial_condition = initial_condition
        self._indicators = indicators

    @classmethod
    def from_dict(cls, dikt) -> 'SimulationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SimulationRequest of this SimulationRequest.  # noqa: E501
        :rtype: SimulationRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def symbols(self) -> List[str]:
        """Gets the symbols of this SimulationRequest.


        :return: The symbols of this SimulationRequest.
        :rtype: List[str]
        """
        return self._symbols

    @symbols.setter
    def symbols(self, symbols: List[str]):
        """Sets the symbols of this SimulationRequest.


        :param symbols: The symbols of this SimulationRequest.
        :type symbols: List[str]
        """
        if symbols is None:
            raise ValueError("Invalid value for `symbols`, must not be `None`")  # noqa: E501

        self._symbols = symbols

    @property
    def training_start_date(self) -> datetime:
        """Gets the training_start_date of this SimulationRequest.


        :return: The training_start_date of this SimulationRequest.
        :rtype: datetime
        """
        return self._training_start_date

    @training_start_date.setter
    def training_start_date(self, training_start_date: datetime):
        """Sets the training_start_date of this SimulationRequest.


        :param training_start_date: The training_start_date of this SimulationRequest.
        :type training_start_date: datetime
        """
        if training_start_date is None:
            raise ValueError("Invalid value for `training_start_date`, must not be `None`")  # noqa: E501

        self._training_start_date = training_start_date

    @property
    def training_end_date(self) -> datetime:
        """Gets the training_end_date of this SimulationRequest.


        :return: The training_end_date of this SimulationRequest.
        :rtype: datetime
        """
        return self._training_end_date

    @training_end_date.setter
    def training_end_date(self, training_end_date: datetime):
        """Sets the training_end_date of this SimulationRequest.


        :param training_end_date: The training_end_date of this SimulationRequest.
        :type training_end_date: datetime
        """
        if training_end_date is None:
            raise ValueError("Invalid value for `training_end_date`, must not be `None`")  # noqa: E501

        self._training_end_date = training_end_date

    @property
    def testing_start_date(self) -> datetime:
        """Gets the testing_start_date of this SimulationRequest.


        :return: The testing_start_date of this SimulationRequest.
        :rtype: datetime
        """
        return self._testing_start_date

    @testing_start_date.setter
    def testing_start_date(self, testing_start_date: datetime):
        """Sets the testing_start_date of this SimulationRequest.


        :param testing_start_date: The testing_start_date of this SimulationRequest.
        :type testing_start_date: datetime
        """
        if testing_start_date is None:
            raise ValueError("Invalid value for `testing_start_date`, must not be `None`")  # noqa: E501

        self._testing_start_date = testing_start_date

    @property
    def testing_end_date(self) -> datetime:
        """Gets the testing_end_date of this SimulationRequest.


        :return: The testing_end_date of this SimulationRequest.
        :rtype: datetime
        """
        return self._testing_end_date

    @testing_end_date.setter
    def testing_end_date(self, testing_end_date: datetime):
        """Sets the testing_end_date of this SimulationRequest.


        :param testing_end_date: The testing_end_date of this SimulationRequest.
        :type testing_end_date: datetime
        """
        if testing_end_date is None:
            raise ValueError("Invalid value for `testing_end_date`, must not be `None`")  # noqa: E501

        self._testing_end_date = testing_end_date

    @property
    def algorithm(self) -> List[AlgorithmType]:
        """Gets the algorithm of this SimulationRequest.


        :return: The algorithm of this SimulationRequest.
        :rtype: List[AlgorithmType]
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm: List[AlgorithmType]):
        """Sets the algorithm of this SimulationRequest.


        :param algorithm: The algorithm of this SimulationRequest.
        :type algorithm: List[AlgorithmType]
        """
        if algorithm is None:
            raise ValueError("Invalid value for `algorithm`, must not be `None`")  # noqa: E501

        self._algorithm = algorithm

    @property
    def initial_condition(self) -> List[InitialCondition]:
        """Gets the initial_condition of this SimulationRequest.


        :return: The initial_condition of this SimulationRequest.
        :rtype: List[InitialCondition]
        """
        return self._initial_condition

    @initial_condition.setter
    def initial_condition(self, initial_condition: List[InitialCondition]):
        """Sets the initial_condition of this SimulationRequest.


        :param initial_condition: The initial_condition of this SimulationRequest.
        :type initial_condition: List[InitialCondition]
        """
        if initial_condition is None:
            raise ValueError("Invalid value for `initial_condition`, must not be `None`")  # noqa: E501

        self._initial_condition = initial_condition

    @property
    def indicators(self) -> List[Indicator]:
        """Gets the indicators of this SimulationRequest.


        :return: The indicators of this SimulationRequest.
        :rtype: List[Indicator]
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators: List[Indicator]):
        """Sets the indicators of this SimulationRequest.


        :param indicators: The indicators of this SimulationRequest.
        :type indicators: List[Indicator]
        """
        if indicators is None:
            raise ValueError("Invalid value for `indicators`, must not be `None`")  # noqa: E501

        self._indicators = indicators

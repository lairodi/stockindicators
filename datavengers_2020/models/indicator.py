# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from datavengers_2020.models.base_model_ import Model
from datavengers_2020.models.indicator_value import IndicatorValue  # noqa: F401,E501
from datavengers_2020 import util


class Indicator(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, symbol: str=None, indicator: str=None, start_date: datetime=None, end_date: datetime=None, window_size: int=None, bandwidth: float=None, values: List[IndicatorValue]=None):  # noqa: E501
        """Indicator - a model defined in Swagger

        :param symbol: The symbol of this Indicator.  # noqa: E501
        :type symbol: str
        :param indicator: The indicator of this Indicator.  # noqa: E501
        :type indicator: str
        :param start_date: The start_date of this Indicator.  # noqa: E501
        :type start_date: datetime
        :param end_date: The end_date of this Indicator.  # noqa: E501
        :type end_date: datetime
        :param window_size: The window_size of this Indicator.  # noqa: E501
        :type window_size: int
        :param bandwidth: The bandwidth of this Indicator.  # noqa: E501
        :type bandwidth: float
        :param values: The values of this Indicator.  # noqa: E501
        :type values: List[IndicatorValue]
        """
        self.swagger_types = {
            'symbol': str,
            'indicator': str,
            'start_date': datetime,
            'end_date': datetime,
            'window_size': int,
            'bandwidth': float,
            'values': List[IndicatorValue]
        }

        self.attribute_map = {
            'symbol': 'symbol',
            'indicator': 'indicator',
            'start_date': 'start_date',
            'end_date': 'end_date',
            'window_size': 'windowSize',
            'bandwidth': 'bandwidth',
            'values': 'values'
        }
        self._symbol = symbol
        self._indicator = indicator
        self._start_date = start_date
        self._end_date = end_date
        self._window_size = window_size
        self._bandwidth = bandwidth
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'Indicator':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Indicator of this Indicator.  # noqa: E501
        :rtype: Indicator
        """
        return util.deserialize_model(dikt, cls)

    @property
    def symbol(self) -> str:
        """Gets the symbol of this Indicator.


        :return: The symbol of this Indicator.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this Indicator.


        :param symbol: The symbol of this Indicator.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def indicator(self) -> str:
        """Gets the indicator of this Indicator.


        :return: The indicator of this Indicator.
        :rtype: str
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator: str):
        """Sets the indicator of this Indicator.


        :param indicator: The indicator of this Indicator.
        :type indicator: str
        """
        if indicator is None:
            raise ValueError("Invalid value for `indicator`, must not be `None`")  # noqa: E501

        self._indicator = indicator

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this Indicator.


        :return: The start_date of this Indicator.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this Indicator.


        :param start_date: The start_date of this Indicator.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self) -> datetime:
        """Gets the end_date of this Indicator.


        :return: The end_date of this Indicator.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: datetime):
        """Sets the end_date of this Indicator.


        :param end_date: The end_date of this Indicator.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def window_size(self) -> int:
        """Gets the window_size of this Indicator.


        :return: The window_size of this Indicator.
        :rtype: int
        """
        return self._window_size

    @window_size.setter
    def window_size(self, window_size: int):
        """Sets the window_size of this Indicator.


        :param window_size: The window_size of this Indicator.
        :type window_size: int
        """
        if window_size is None:
            raise ValueError("Invalid value for `window_size`, must not be `None`")  # noqa: E501

        self._window_size = window_size

    @property
    def bandwidth(self) -> float:
        """Gets the bandwidth of this Indicator.

        Only used for bollinger bands, this indicates the bandwidth  # noqa: E501

        :return: The bandwidth of this Indicator.
        :rtype: float
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth: float):
        """Sets the bandwidth of this Indicator.

        Only used for bollinger bands, this indicates the bandwidth  # noqa: E501

        :param bandwidth: The bandwidth of this Indicator.
        :type bandwidth: float
        """

        self._bandwidth = bandwidth

    @property
    def values(self) -> List[IndicatorValue]:
        """Gets the values of this Indicator.


        :return: The values of this Indicator.
        :rtype: List[IndicatorValue]
        """
        return self._values

    @values.setter
    def values(self, values: List[IndicatorValue]):
        """Sets the values of this Indicator.


        :param values: The values of this Indicator.
        :type values: List[IndicatorValue]
        """

        self._values = values

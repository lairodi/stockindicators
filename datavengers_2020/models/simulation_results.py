# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from datavengers_2020.models.base_model_ import Model
from datavengers_2020.models.day_result import DayResult  # noqa: F401,E501
from datavengers_2020 import util


class SimulationResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, train: List[DayResult]=None, test: List[DayResult]=None):  # noqa: E501
        """SimulationResults - a model defined in Swagger

        :param train: The train of this SimulationResults.  # noqa: E501
        :type train: List[DayResult]
        :param test: The test of this SimulationResults.  # noqa: E501
        :type test: List[DayResult]
        """
        self.swagger_types = {
            'train': List[DayResult],
            'test': List[DayResult]
        }

        self.attribute_map = {
            'train': 'train',
            'test': 'test'
        }
        self._train = train
        self._test = test

    @classmethod
    def from_dict(cls, dikt) -> 'SimulationResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SimulationResults of this SimulationResults.  # noqa: E501
        :rtype: SimulationResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def train(self) -> List[DayResult]:
        """Gets the train of this SimulationResults.


        :return: The train of this SimulationResults.
        :rtype: List[DayResult]
        """
        return self._train

    @train.setter
    def train(self, train: List[DayResult]):
        """Sets the train of this SimulationResults.


        :param train: The train of this SimulationResults.
        :type train: List[DayResult]
        """
        if train is None:
            raise ValueError("Invalid value for `train`, must not be `None`")  # noqa: E501

        self._train = train

    @property
    def test(self) -> List[DayResult]:
        """Gets the test of this SimulationResults.


        :return: The test of this SimulationResults.
        :rtype: List[DayResult]
        """
        return self._test

    @test.setter
    def test(self, test: List[DayResult]):
        """Sets the test of this SimulationResults.


        :param test: The test of this SimulationResults.
        :type test: List[DayResult]
        """
        if test is None:
            raise ValueError("Invalid value for `test`, must not be `None`")  # noqa: E501

        self._test = test

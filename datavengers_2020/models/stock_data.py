# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from datavengers_2020.models.base_model_ import Model
from datavengers_2020.models.stock_price import StockPrice  # noqa: F401,E501
from datavengers_2020 import util


class StockData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, symbol: str=None, start_date: datetime=None, end_date: datetime=None, prices: List[StockPrice]=None):  # noqa: E501
        """StockData - a model defined in Swagger

        :param symbol: The symbol of this StockData.  # noqa: E501
        :type symbol: str
        :param start_date: The start_date of this StockData.  # noqa: E501
        :type start_date: datetime
        :param end_date: The end_date of this StockData.  # noqa: E501
        :type end_date: datetime
        :param prices: The prices of this StockData.  # noqa: E501
        :type prices: List[StockPrice]
        """
        self.swagger_types = {
            'symbol': str,
            'start_date': datetime,
            'end_date': datetime,
            'prices': List[StockPrice]
        }

        self.attribute_map = {
            'symbol': 'symbol',
            'start_date': 'start_date',
            'end_date': 'end_date',
            'prices': 'prices'
        }
        self._symbol = symbol
        self._start_date = start_date
        self._end_date = end_date
        self._prices = prices

    @classmethod
    def from_dict(cls, dikt) -> 'StockData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StockData of this StockData.  # noqa: E501
        :rtype: StockData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def symbol(self) -> str:
        """Gets the symbol of this StockData.


        :return: The symbol of this StockData.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this StockData.


        :param symbol: The symbol of this StockData.
        :type symbol: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this StockData.


        :return: The start_date of this StockData.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this StockData.


        :param start_date: The start_date of this StockData.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self) -> datetime:
        """Gets the end_date of this StockData.


        :return: The end_date of this StockData.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: datetime):
        """Sets the end_date of this StockData.


        :param end_date: The end_date of this StockData.
        :type end_date: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def prices(self) -> List[StockPrice]:
        """Gets the prices of this StockData.


        :return: The prices of this StockData.
        :rtype: List[StockPrice]
        """
        return self._prices

    @prices.setter
    def prices(self, prices: List[StockPrice]):
        """Sets the prices of this StockData.


        :param prices: The prices of this StockData.
        :type prices: List[StockPrice]
        """

        self._prices = prices
